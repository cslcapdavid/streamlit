<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PTI-Style Meeting Timer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body class="bg-gray-900 text-white">
    <div id="root" class="container mx-auto p-4"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        const Timer = ({ id, name, initialTime, onDelete, onRename, onTimeChange }) => {
            const [timeLeft, setTimeLeft] = useState(initialTime * 60);
            const [isRunning, setIsRunning] = useState(false);
            const [editingName, setEditingName] = useState(false);
            const [editingTime, setEditingTime] = useState(false);
            const [timerName, setTimerName] = useState(name);
            const [timerTime, setTimerTime] = useState(initialTime);
            const [overtime, setOvertime] = useState(0);
            const [isOvertime, setIsOvertime] = useState(false);
            
            useEffect(() => {
                let interval = null;
                
                if (isRunning) {
                    interval = setInterval(() => {
                        if (timeLeft > 0) {
                            // Normal countdown
                            setTimeLeft(prev => prev - 1);
                        } else {
                            // In overtime
                            setIsOvertime(true);
                            setOvertime(prev => prev + 1);
                        }
                    }, 1000);
                }
                
                return () => clearInterval(interval);
            }, [isRunning, timeLeft]);
            
            const formatTime = (seconds) => {
                const mins = Math.floor(Math.abs(seconds) / 60);
                const secs = Math.abs(seconds) % 60;
                return `${isOvertime ? '+' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;
            };
            
            const getTimerColor = () => {
                if (isOvertime) {
                    // Flashing red for overtime
                    return overtime % 2 === 0 ? 'bg-red-500' : 'bg-red-700';
                }
                if (timeLeft <= 30) {
                    // Return flashing effect when under 30 seconds
                    return timeLeft % 2 === 0 ? 'bg-red-500' : 'bg-red-700';
                }
                if (timeLeft <= 60) return 'bg-red-500';
                if (timeLeft <= 180) return 'bg-yellow-400';
                return 'bg-green-500';
            };
            
            const startTimer = () => setIsRunning(true);
            const pauseTimer = () => setIsRunning(false);
            const resetTimer = () => {
                setIsRunning(false);
                setTimeLeft(timerTime * 60);
                setOvertime(0);
                setIsOvertime(false);
            };
            
            const handleNameChange = (e) => {
                setTimerName(e.target.value);
            };
            
            const handleTimeChange = (e) => {
                const newTime = parseInt(e.target.value) || 1;
                setTimerTime(newTime);
            };
            
            const toggleEditName = () => {
                setEditingName(!editingName);
            };
            
            const toggleEditTime = () => {
                setEditingTime(!editingTime);
            };
            
            const saveTimerName = () => {
                onRename(id, timerName);
                setEditingName(false);
            };
            
            const saveTimerTime = () => {
                onTimeChange(id, timerTime);
                setTimeLeft(timerTime * 60);
                setOvertime(0);
                setIsOvertime(false);
                setIsRunning(false);
                setEditingTime(false);
            };
            
            return (
                <div className="flex flex-col p-4 bg-gray-800 rounded-lg shadow-lg mb-4">
                    <div className="flex items-center justify-between w-full mb-4">
                        {editingName ? (
                            <div className="flex flex-grow">
                                <input
                                    type="text"
                                    value={timerName}
                                    onChange={handleNameChange}
                                    className="flex-grow px-3 py-2 bg-gray-700 text-white text-lg font-bold rounded-l"
                                    autoFocus
                                />
                                <button 
                                    onClick={saveTimerName}
                                    className="px-4 py-2 bg-blue-600 text-white rounded-r"
                                >
                                    Save
                                </button>
                            </div>
                        ) : (
                            <div className="flex flex-grow items-center">
                                <h2 className="text-xl font-bold text-white">{timerName}</h2>
                                <button 
                                    onClick={toggleEditName}
                                    className="ml-2 text-blue-400 hover:text-blue-300"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                    </svg>
                                </button>
                            </div>
                        )}
                        <button 
                            onClick={() => onDelete(id)}
                            className="ml-2 text-red-400 hover:text-red-300"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                            </svg>
                        </button>
                    </div>
                    
                    <div className="flex items-center justify-between mb-2">
                        {editingTime ? (
                            <div className="flex items-center">
                                <input
                                    type="number"
                                    min="1"
                                    max="999"
                                    value={timerTime}
                                    onChange={handleTimeChange}
                                    className="w-16 px-2 py-1 bg-gray-700 text-white text-sm rounded-l"
                                    autoFocus
                                />
                                <span className="px-2 py-1 bg-gray-600 text-white text-sm">min</span>
                                <button 
                                    onClick={saveTimerTime}
                                    className="px-3 py-1 bg-blue-600 text-white text-sm rounded-r"
                                >
                                    Save
                                </button>
                            </div>
                        ) : (
                            <div className="flex items-center">
                                <span className="text-gray-300 text-sm">{timerTime} minutes</span>
                                <button 
                                    onClick={toggleEditTime}
                                    className="ml-2 text-blue-400 hover:text-blue-300"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                    </svg>
                                </button>
                            </div>
                        )}
                    </div>
                    
                    <div className={`flex items-center justify-center w-full h-20 mb-4 rounded-lg ${getTimerColor()} transition-colors duration-500`}>
                        <span className="text-3xl font-mono font-bold text-white">
                            {isOvertime ? formatTime(overtime) : formatTime(timeLeft)}
                        </span>
                    </div>
                    
                    <div className="flex space-x-2">
                        {!isRunning ? (
                            <button
                                onClick={startTimer}
                                className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700"
                            >
                                Start
                            </button>
                        ) : (
                            <button
                                onClick={pauseTimer}
                                className="px-3 py-1 bg-yellow-600 text-white text-sm rounded hover:bg-yellow-700"
                            >
                                Pause
                            </button>
                        )}
                        <button
                            onClick={resetTimer}
                            className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
                        >
                            Reset
                        </button>
                    </div>
                </div>
            );
        };

        const MeetingTimer = () => {
            const [timers, setTimers] = useState([
                { id: 1, name: "Topic 1", time: 5 }
            ]);
            const [nextId, setNextId] = useState(2);
            const [selectedTime, setSelectedTime] = useState(5);
            const [customTime, setCustomTime] = useState('');
            const [newTimerName, setNewTimerName] = useState("New Timer");
            
            const addTimer = () => {
                const timeToUse = customTime ? parseInt(customTime) : selectedTime;
                setTimers([...timers, { id: nextId, name: newTimerName, time: timeToUse }]);
                setNextId(nextId + 1);
                setNewTimerName("New Timer");
                setCustomTime('');
            };
            
            const deleteTimer = (id) => {
                setTimers(timers.filter(timer => timer.id !== id));
            };
            
            const renameTimer = (id, newName) => {
                setTimers(timers.map(timer => 
                    timer.id === id ? { ...timer, name: newName } : timer
                ));
            };
            
            const changeTimerTime = (id, newTime) => {
                setTimers(timers.map(timer => 
                    timer.id === id ? { ...timer, time: newTime } : timer
                ));
            };
            
            const handleCustomTimeChange = (e) => {
                setCustomTime(e.target.value);
                if (e.target.value) {
                    setSelectedTime(null); // Clear preset selection when custom is used
                }
            };
            
            const handlePresetTimeClick = (mins) => {
                setSelectedTime(mins);
                setCustomTime(''); // Clear custom input when preset is selected
            };
            
            return (
                <div className="flex flex-col items-center w-full max-w-lg mx-auto p-6 bg-gray-900 rounded-lg shadow-lg">
                    <h1 className="text-2xl font-bold text-white mb-6">PTI-Style Meeting Timers</h1>
                    
                    <div className="w-full mb-6 p-4 bg-gray-800 rounded-lg">
                        <h2 className="text-lg font-semibold text-white mb-2">Add New Timer</h2>
                        
                        <div className="flex mb-3">
                            <input
                                type="text"
                                value={newTimerName}
                                onChange={(e) => setNewTimerName(e.target.value)}
                                className="flex-grow px-3 py-2 bg-gray-700 text-white rounded-l"
                                placeholder="Timer Name"
                            />
                            <button 
                                onClick={addTimer}
                                className="px-4 py-2 bg-blue-600 text-white rounded-r hover:bg-blue-700"
                            >
                                Add
                            </button>
                        </div>
                        
                        <div>
                            <h3 className="text-sm font-semibold text-gray-300 mb-2">Duration (minutes):</h3>
                            <div className="grid grid-cols-6 gap-2 mb-3">
                                {[5, 10, 15, 20, 25, 30].map((mins) => (
                                    <button
                                        key={mins}
                                        onClick={() => handlePresetTimeClick(mins)}
                                        className={`py-1 rounded ${
                                            selectedTime === mins && !customTime
                                                ? 'bg-blue-600 text-white'
                                                : 'bg-gray-600 text-white hover:bg-gray-700'
                                        }`}
                                    >
                                        {mins}
                                    </button>
                                ))}
                            </div>
                            <div className="flex items-center">
                                <span className="text-gray-300 text-sm mr-2">Custom:</span>
                                <input
                                    type="number"
                                    min="1"
                                    max="999"
                                    value={customTime}
                                    onChange={handleCustomTimeChange}
                                    className="w-20 px-2 py-1 bg-gray-700 text-white text-sm rounded"
                                    placeholder="mins"
                                />
                            </div>
                        </div>
                    </div>
                    
                    <div className="w-full space-y-4">
                        {timers.map(timer => (
                            <Timer
                                key={timer.id}
                                id={timer.id}
                                name={timer.name}
                                initialTime={timer.time}
                                onDelete={deleteTimer}
                                onRename={renameTimer}
                                onTimeChange={changeTimerTime}
                            />
                        ))}
                    </div>
                </div>
            );
        };

        ReactDOM.render(<MeetingTimer />, document.getElementById('root'));
    </script>
</body>
</html>
