<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Debt Deal Economics Calculator</title>
  <style>
    body { font-family: Arial, sans-serif; max-width: 800px; margin: 40px auto; padding: 0 20px; color: #333; }
    h1, h2 { text-align: center; }
    form { display: grid; grid-template-columns: 1fr 1fr; gap: 10px 20px; margin-bottom: 30px; }
    label { display: flex; flex-direction: column; font-size: 14px; }
    input, select { padding: 8px; font-size: 16px; border: 1px solid #ccc; border-radius: 4px; }
    .section-header { grid-column: span 2; display: flex; justify-content: space-around; font-weight: bold; margin-top: 20px; }
    .inputs-grid { grid-column: span 2; display: grid; grid-template-columns: 1fr 1fr; gap: 10px; }
    .group { display: flex; flex-direction: column; }
    button { grid-column: span 2; padding: 10px; font-size: 16px; background: #63d297; color: white; border: none; border-radius: 4px; cursor: pointer; }
    button:hover { background: #52c285; }
    .results-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
    .results-table th, .results-table td { padding: 12px; text-align: left; }
    .results-table tbody tr:nth-child(odd) { background-color: #f9f9f9; }
    .results-table .section-title th { background-color: #63d297; color: white; font-size: 16px; text-align: center; }
    .status-good { color: green; font-weight: bold; }
    .status-bad { color: red; font-weight: bold; }
  </style>
</head>
<body>
  <h1>Debt Deal Economics Calculator</h1>
  <form id="calcForm">
    <label>Loan Amount:
      <input type="text" id="loanAmount" required data-type="currency">
    </label>
    <label>Multiplier:
      <input type="text" id="multiplier" required data-type="number">
    </label>
    <label>Term (Weeks):
      <input type="text" id="termWeeks" required data-type="number">
    </label>
    <label>Commission (%):
      <input type="text" id="commission" required data-type="percent">
    </label>
    <label>Platform Fee (%):
      <input type="text" id="platformFee" required data-type="percent">
    </label>
    <label>Participation %:
      <input type="text" id="participationPct" required data-type="percent">
    </label>
    <div class="section-header">
      <span>Revenue Inputs</span>
      <span>Deposit Inputs</span>
    </div>
    <div class="inputs-grid">
      <div class="group">
        <label>Unit:</label>
        <select id="revenueUnit">
          <option value="100">Hundreds</option>
          <option value="1000">Thousands</option>
          <option value="1000000" selected>Millions</option>
        </select>
        <div>
          <label class="revenueField">Month 1:<input type="text" id="rev1" data-type="number"></label>
          <label class="revenueField">Month 2:<input type="text" id="rev2" data-type="number"></label>
          <label class="revenueField">Month 3:<input type="text" id="rev3" data-type="number"></label>
          <label class="revenueField">Month 4:<input type="text" id="rev4" data-type="number"></label>
          <label class="revenueField">Month 5:<input type="text" id="rev5" data-type="number"></label>
          <label class="revenueField">Month 6:<input type="text" id="rev6" data-type="number"></label>
        </div>
      </div>
      <div class="group">
        <label>Unit:</label>
        <select id="depositUnit">
          <option value="100">Hundreds</option>
          <option value="1000">Thousands</option>
          <option value="1000000" selected>Millions</option>
        </select>
        <div>
          <label class="depositField">Month 1:<input type="text" id="dep1" data-type="number"></label>
          <label class="depositField">Month 2:<input type="text" id="dep2" data-type="number"></label>
          <label class="depositField">Month 3:<input type="text" id="dep3" data-type="number"></label>
          <label class="depositField">Month 4:<input type="text" id="dep4" data-type="number"></label>
          <label class="depositField">Month 5:<input type="text" id="dep5" data-type="number"></label>
          <label class="depositField">Month 6:<input type="text" id="dep6" data-type="number"></label>
        </div>
      </div>
    </div>
    <button type="button" onclick="calculate()">Calculate</button>
  </form>
  <h2>Results</h2>
  <table class="results-table">
    <thead>
      <tr><th>Metric</th><th>Value</th><th></th></tr>
    </thead>
    <tbody id="resultsBody"></tbody>
  </table>
  <script>
    const definitions = {
      'Net MOIC': 'Net Multiple on Invested Capital: total net return divided by total capital in.',
      'Debt Service Coverage Ratio': 'Projected annual net income divided by annual debt service.',
      'Revenue Coverage Ratio': 'Projected annual revenue divided by annual debt service.',
      'Revenue to Loan Ratio': 'Projected annual revenue divided by the loan amount.',
      'Payback Period (weeks)': 'Weeks needed to recoup principal via gross weekly payments.'
    };
    document.querySelectorAll('#calcForm input').forEach(input => {
      input.addEventListener('blur', e => {
        const type = e.target.dataset.type;
        const id = e.target.id;
        let raw = e.target.value.replace(/[^0-9.]/g, '');
        if (!raw) return;
        let num = parseFloat(raw);
        if (isNaN(num)) return;
        if (type === 'currency') e.target.value = num.toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 });
        else if (type === 'percent') e.target.value = Math.round(num) + '%';
        else if (id === 'multiplier' || id.startsWith('rev') || id.startsWith('dep')) e.target.value = num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        else e.target.value = Math.round(num);
      });
      input.addEventListener('focus', e => e.target.value = e.target.value.replace(/[^0-9.]/g, ''));
    });
    function getInputValue(id) { const v = document.getElementById(id).value.replace(/[^0-9.]/g,''); return v?parseFloat(v):0; }
    function calculate() {
      const loanRounded = Math.round(getInputValue('loanAmount'));
      const participationPct = getInputValue('participationPct')/100;
      const commissionPct = getInputValue('commission')/100;
      const platformFeePct = getInputValue('platformFee')/100;
      const multiplier = getInputValue('multiplier');
      const termWeeks = getInputValue('termWeeks');
      const revUnit = +document.getElementById('revenueUnit').value;
      const depUnit = +document.getElementById('depositUnit').value;
      let revSum=0, revCount=0, depSum=0, depCount=0;
      for(let i=1;i<=6;i++){ const rv=getInputValue('rev'+i); if(rv){ revSum+=rv*revUnit; revCount++; }}
      for(let i=1;i<=6;i++){ const dv=getInputValue('dep'+i); if(dv){ depSum+=dv*depUnit; depCount++; }}
      const avgRev = revCount? revSum/revCount:0;
      const avgDep = depCount? depSum/depCount:0;
      const months = termWeeks/4.345;
      const revenue = avgRev*12*0.60;
      const netIncome = avgDep*12*0.30;
      const participationAmt = loanRounded*participationPct;
      const totalCapitalIn = participationAmt*(1+commissionPct);
      const totalReturn = multiplier*participationAmt;
      const totalInterest = totalReturn - participationAmt;
      const weeklyPMT = totalReturn/termWeeks;
      const paybackWeeks = weeklyPMT? participationAmt/weeklyPMT:0;
      const netWeeklyPMT = weeklyPMT*(1-platformFeePct);
      const totalMonthlyNet = netWeeklyPMT*4;
      const totalNetReturn = netWeeklyPMT*termWeeks;
      const annualDebtService = weeklyPMT*52;
      const dscr = annualDebtService? netIncome/annualDebtService:0;
      const revCoverage = annualDebtService? revenue/annualDebtService:0;
      const netMOIC = totalCapitalIn? totalNetReturn/totalCapitalIn:0;
      const revenueLoanRatio = revenue? revenue/loanRounded:0;
      const thresholds = {'Net MOIC':1.2,'Debt Service Coverage Ratio':1.25,'Revenue Coverage Ratio':1.5,'Revenue to Loan Ratio':1.5};
      function getStatus(label,value){ const t=thresholds[label]; return t? (value>=t? '<span class="status-good">Good</span>':'<span class="status-bad">Bad</span>') : ''; }
      const sections=[
        {title:'Loan & Terms', rows:[['Loan Amount',loanRounded.toLocaleString('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0}), ''], ['Months',months.toFixed(2),'']]},
        {title:'Financials', rows:[['Average Revenue',Math.round(avgRev).toLocaleString(),''],['Average Balance',Math.round(avgDep).toLocaleString(),''],['Projected Annual Revenue',Math.round(revenue).toLocaleString(),''],['Projected Annual Net Income',Math.round(netIncome).toLocaleString(),'']]},
        {title:'CSL Payments', rows:[['Weekly PMT',Math.round(weeklyPMT).toLocaleString(),''],['Net Weekly PMT',Math.round(netWeeklyPMT).toLocaleString(),''],['Total Monthly Net',Math.round(totalMonthlyNet).toLocaleString(),'']]},
        {title:`CSL Capital ${Math.round(participationPct*100)}%`, rows:[['Participation Amount',Math.round(participationAmt).toLocaleString(),''],['Total Capital In',Math.round(totalCapitalIn).toLocaleString(),''],['Total Return',Math.round(totalReturn).toLocaleString(),''],['Total Interest Paid',Math.round(totalInterest).toLocaleString(),''],['Total Net Return',Math.round(totalNetReturn).toLocaleString(),'']]},
        {title:'Metrics', rows:[['Payback Period (weeks)',paybackWeeks.toFixed(2),'' ],['Net MOIC',netMOIC.toFixed(2),getStatus('Net MOIC',netMOIC)],['Debt Service Coverage Ratio',dscr.toFixed(2),getStatus('Debt Service Coverage Ratio',dscr)],['Revenue Coverage Ratio',revCoverage.toFixed(2),getStatus('Revenue Coverage Ratio',revCoverage)],['Revenue to Loan Ratio',revenueLoanRatio.toFixed(2),getStatus('Revenue to Loan Ratio',revenueLoanRatio)]]}
      ];
      const tbody=document.getElementById('resultsBody'); tbody.innerHTML='';
      sections.forEach(sec=>{ const tr=document.createElement('tr'); tr.classList.add('section-title'); tr.innerHTML=`<th colspan="3">${sec.title}</th>`; tbody.appendChild(tr); sec.rows.forEach(([label,value,status])=>{ const row=document.createElement('tr'); row.innerHTML=`<td title="${definitions[label]||''}">${label}</td><td>${value}</td><td>${status}</td>`; tbody.appendChild(row); });});
    }
  </script>
</body>
</html>
